#!/usr/bin/env python

## Depth blob detection parameters
# Parameters are listed in the order in which the corresponding
# operations are executed (except for deprecated parameters).

PACKAGE='uav_detect'
import roslib;
roslib.load_manifest(PACKAGE)

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator();

params = gen.add_group("Depth blob detection parameters");

# Image preprocessing parameters
params_preproc = params.add_group("Image preprocessing");
params_preproc.add("dilate_iterations", int_t, 1, "how many times to dilate the image", 0, 0, 10);
params_preproc.add("erode_iterations", int_t, 1, "how many times to erode the image", 0, 0, 10);
params_preproc.add("erode_ignore_empty_iterations", int_t, 1, "how many times to erode the image (without using zeros for the erosion)", 0, 0, 10);
params_preproc.add("gaussianblur_size", int_t, 1, "size of gaussian blur kernel (must be odd number)", 0, 0, 50);
params_preproc.add("medianblur_size", int_t, 1, "size of gaussian blur kernel", 0, 0, 5);

params_filter = params.add_group("Blob filtering");
# Filtering by area parameters
params_filter.add("filter_by_area", bool_t, 1, "whether to filter blobs by their area", False);
params_filter.add("min_area", int_t, 1, "minimal blob area", 200, 1, 90000);
params_filter.add("max_area", int_t, 1, "maximal blob area", 10000, 1, 300000);

# Filtering by circularity parameters
params_filter.add("filter_by_circularity", bool_t, 1, "whether to filter blobs by their circularity (ratio of 4*pi*area to perimeter squared)", False);
params_filter.add("min_circularity", double_t, 1, "minimal blob circularity", 0.0, 0.0, 1.0);
params_filter.add("max_circularity", double_t, 1, "maximal blob circularity", 1.0, 0.0, 1.0);

# Filtering by orientation parameters
params_filter.add("filter_by_orientation", bool_t, 1, "whether to filter blobs by their orientation (absolute angle of major axis from x axis)", False);
params_filter.add("min_angle", double_t, 1, "minimal blob angle from x axis", 0.0, 0.0, 1.5708);
params_filter.add("max_angle", double_t, 1, "maximal blob angle from x axis", 1.5708, 0.0, 1.5708);

# Filtering by inertia ratio parameters
params_filter.add("filter_by_inertia", bool_t, 1, "whether to filter blobs by their inertia (ratio of major axis to minor axis)", False);
params_filter.add("min_inertia_ratio", double_t, 1, "minimal blob inertia ratio", 0.0, 0.0, 1.0);
params_filter.add("max_inertia_ratio", double_t, 1, "maximal blob inertia ratio", 1.0, 0.0, 1.0);

# Filtering by convexity parameters
params_filter.add("filter_by_convexity", bool_t, 1, "whether to filter blobs by their convexity (ratio of area to area of convex hull)", False);
params_filter.add("min_convexity", double_t, 1, "minimal blob convexity", 0.0, 0.0, 1.0);
params_filter.add("max_convexity", double_t, 1, "maximal blob convexity", 1.0, 0.0, 1.0);

# Filtering by color parameters
params_filter.add("filter_by_color", bool_t, 1, "whether to filter blobs by their color (distance)", True);
params_filter.add("min_depth", int_t, 1, "minimal detection distance (in mm)", 300, 1, 65535);
params_filter.add("max_depth", int_t, 1, "maximal detection distance (in mm)", 18000, 1, 65535);

# Other filtering parameters
params_filter.add("min_dist_between", double_t, 1, "minimal distance between blobs (also affects blob grouping)", 10.0, 0.0, 1470.0);
params_filter.add("min_repeatability", int_t, 1, "in how many threshold steps does the blob need to be detected", 2, 1, 255);

# Deprecated parameters
params_deprecated = params.add_group("Deprecated");
params_deprecated.add("blur_empty_areas", bool_t, 1, "whether to fill empty areas with a blur of the surroundings", False);
params_deprecated.add("use_threshold_width", bool_t, 1, "whether to consider only depths withing a certaing width from the current threshold", True);
params_deprecated.add("threshold_step", int_t, 1, "distance of thresholding steps", 100, 0, 65535);
params_deprecated.add("threshold_width", int_t, 1, "width of thresholding steps", 100, 0, 65535);

exit(gen.generate(PACKAGE, "uav_detect", "DetectionParams"))
