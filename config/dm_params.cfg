#!/usr/bin/env python

PACKAGE='uav_detect'
import roslib;
roslib.load_manifest(PACKAGE)

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator();
params = gen.add_group("Params");

# Image preprocessing parameters
params.add("dilate_iterations", int_t, 1, "how many times to dilate the image after thresholding", 0, 0, 10);
params.add("erode_iterations", int_t, 1, "how many times to erode the image after thresholding", 0, 0, 10);
params.add("gaussianblur_size", int_t, 1, "size of gaussian blur kernel", 0, 0, 50);
params.add("medianblur_size", int_t, 1, "size of gaussian blur kernel", 0, 0, 5);

# Filtering by color parameters
params.add("blob_filter_by_color", bool_t, 1, "whether to filter blobs by their color (distance)", True, False, True);
params.add("min_depth", int_t, 1, "minimal detection distance (in mm)", 300, 1, 65535);
params.add("max_depth", int_t, 1, "maximal detection distance (in mm)", 18000, 1, 65535);
params.add("use_threshold_width", bool_t, 1, "whether to consider only depths withing a certaing width from the current threshold", True, False, True);
params.add("blob_threshold_step", int_t, 1, "distance of thresholding steps", 100, 0, 65535);
params.add("blob_threshold_width", int_t, 1, "width of thresholding steps", 100, 0, 65535);

# Filtering by area parameters
params.add("blob_filter_by_area", bool_t, 1, "whether to filter blobs by their area", False, False, True);
params.add("blob_min_area", int_t, 1, "minimal blob area", 200, 1, 90000);
params.add("blob_max_area", int_t, 1, "maximal blob area", 10000, 1, 300000);

# Filtering by circularity parameters
params.add("blob_filter_by_circularity", bool_t, 1, "whether to filter blobs by their circularity", False, False, True);
params.add("blob_min_circularity", double_t, 1, "minimal blob circularity", 0.0, 0.0, 1.0);
params.add("blob_max_circularity", double_t, 1, "maximal blob circularity", 1.0, 0.0, 1.0);

# Filtering by convexity parameters
params.add("blob_filter_by_convexity", bool_t, 1, "whether to filter blobs by their convexity", False, False, True);
params.add("blob_min_convexity", double_t, 1, "minimal blob convexity", 0.0, 0.0, 1.0);
params.add("blob_max_convexity", double_t, 1, "maximal blob convexity", 1.0, 0.0, 1.0);

# Filtering by inertia ratio parameters
params.add("blob_filter_by_inertia", bool_t, 1, "whether to filter blobs by their inertia", False, False, True);
params.add("blob_min_inertia_ratio", double_t, 1, "minimal blob inertia ratio", 0.0, 0.0, 1.0);
params.add("blob_max_inertia_ratio", double_t, 1, "maximal blob inertia ratio", 1.0, 0.0, 1.0);

# Other filtering parameters
params.add("blob_min_dist_between", double_t, 1, "minimal distance between blobs", 10.0, 0.0, 1470.0);
params.add("blob_min_repeatability", int_t, 1, "in how many threshold steps does the blob need to be detected", 2, 1, 255);

exit(gen.generate(PACKAGE, "uav_detect", "DepthMapParams"))
